//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use bcrypt::hash;
use sea_orm::{entity::prelude::*, ActiveValue, Set};
use serde::{
    ser::{Serialize, SerializeStruct, Serializer},
    Deserialize,
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub password: String,
    #[sea_orm(unique)]
    pub email: String,
    pub created_at: Option<DateTimeUtc>,
    pub updated_at: Option<DateTimeUtc>,
}

impl Serialize for Model {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let mut state = serializer.serialize_struct("Model", 5)?;
        state.serialize_field("id", &self.id)?;
        state.serialize_field("name", &self.name)?;
        state.serialize_field("email", &self.email)?;
        state.serialize_field(
            "createdAt",
            &self
                .created_at
                .map(|created_at| created_at.format("%Y-%m-%d %H:%M:%S").to_string()),
        )?;
        state.serialize_field(
            "updatedAt",
            &self
                .updated_at
                .map(|updated_at| updated_at.format("%Y-%m-%d %H:%M:%S").to_string()),
        )?;
        state.end()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    /// Will be triggered before insert / update
    async fn before_save<C>(mut self, db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if let ActiveValue::Set(password) = self.password {
            let password_hash = match hash(password, 10) {
                Ok(hash) => hash,
                Err(_) => {
                    return Err(DbErr::Custom(format!(
                        "[before_save] Invalid password, insert: {}",
                        insert
                    )))
                }
            };
            self.password = Set(password_hash);
        }

        Ok(self)
    }
}
